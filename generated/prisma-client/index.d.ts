// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  bookmark: (where?: BookmarkWhereInput) => Promise<boolean>;
  useraccount: (where?: UseraccountWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bookmark: (where: BookmarkWhereUniqueInput) => BookmarkNullablePromise;
  bookmarks: (args?: {
    where?: BookmarkWhereInput;
    orderBy?: BookmarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bookmark>;
  bookmarksConnection: (args?: {
    where?: BookmarkWhereInput;
    orderBy?: BookmarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookmarkConnectionPromise;
  useraccount: (
    where: UseraccountWhereUniqueInput
  ) => UseraccountNullablePromise;
  useraccounts: (args?: {
    where?: UseraccountWhereInput;
    orderBy?: UseraccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Useraccount>;
  useraccountsConnection: (args?: {
    where?: UseraccountWhereInput;
    orderBy?: UseraccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UseraccountConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBookmark: (data: BookmarkCreateInput) => BookmarkPromise;
  updateBookmark: (args: {
    data: BookmarkUpdateInput;
    where: BookmarkWhereUniqueInput;
  }) => BookmarkPromise;
  updateManyBookmarks: (args: {
    data: BookmarkUpdateManyMutationInput;
    where?: BookmarkWhereInput;
  }) => BatchPayloadPromise;
  upsertBookmark: (args: {
    where: BookmarkWhereUniqueInput;
    create: BookmarkCreateInput;
    update: BookmarkUpdateInput;
  }) => BookmarkPromise;
  deleteBookmark: (where: BookmarkWhereUniqueInput) => BookmarkPromise;
  deleteManyBookmarks: (where?: BookmarkWhereInput) => BatchPayloadPromise;
  createUseraccount: (data: UseraccountCreateInput) => UseraccountPromise;
  updateUseraccount: (args: {
    data: UseraccountUpdateInput;
    where: UseraccountWhereUniqueInput;
  }) => UseraccountPromise;
  updateManyUseraccounts: (args: {
    data: UseraccountUpdateManyMutationInput;
    where?: UseraccountWhereInput;
  }) => BatchPayloadPromise;
  upsertUseraccount: (args: {
    where: UseraccountWhereUniqueInput;
    create: UseraccountCreateInput;
    update: UseraccountUpdateInput;
  }) => UseraccountPromise;
  deleteUseraccount: (where: UseraccountWhereUniqueInput) => UseraccountPromise;
  deleteManyUseraccounts: (
    where?: UseraccountWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bookmark: (
    where?: BookmarkSubscriptionWhereInput
  ) => BookmarkSubscriptionPayloadSubscription;
  useraccount: (
    where?: UseraccountSubscriptionWhereInput
  ) => UseraccountSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookmarkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "url_ASC"
  | "url_DESC"
  | "displayurl_ASC"
  | "displayurl_DESC"
  | "description_ASC"
  | "description_DESC"
  | "fromsource_ASC"
  | "fromsource_DESC"
  | "tweetsourcetext_ASC"
  | "tweetsourcetext_DESC"
  | "tweetsourceuserid_ASC"
  | "tweetsourceuserid_DESC"
  | "tweetsourceusername_ASC"
  | "tweetsourceusername_DESC"
  | "tweetsourcescreenname_ASC"
  | "tweetsourcescreenname_DESC";

export type UseraccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "registered_source_ASC"
  | "registered_source_DESC"
  | "twitter_id_ASC"
  | "twitter_id_DESC"
  | "twitter_display_name_ASC"
  | "twitter_display_name_DESC"
  | "twitter_screen_name_ASC"
  | "twitter_screen_name_DESC"
  | "twitter_profile_image_ASC"
  | "twitter_profile_image_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UseraccountUpdateOneRequiredWithoutBookmarksInput {
  create?: Maybe<UseraccountCreateWithoutBookmarksInput>;
  update?: Maybe<UseraccountUpdateWithoutBookmarksDataInput>;
  upsert?: Maybe<UseraccountUpsertWithoutBookmarksInput>;
  connect?: Maybe<UseraccountWhereUniqueInput>;
}

export type BookmarkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UseraccountUpdateInput {
  registered_source?: Maybe<String>;
  twitter_id?: Maybe<String>;
  twitter_display_name?: Maybe<String>;
  twitter_screen_name?: Maybe<String>;
  twitter_profile_image?: Maybe<String>;
  bookmarks?: Maybe<BookmarkUpdateManyWithoutBelongsToInput>;
}

export interface UseraccountCreateInput {
  id?: Maybe<ID_Input>;
  registered_source: String;
  twitter_id?: Maybe<String>;
  twitter_display_name?: Maybe<String>;
  twitter_screen_name?: Maybe<String>;
  twitter_profile_image?: Maybe<String>;
  bookmarks?: Maybe<BookmarkCreateManyWithoutBelongsToInput>;
}

export interface UseraccountUpsertWithoutBookmarksInput {
  update: UseraccountUpdateWithoutBookmarksDataInput;
  create: UseraccountCreateWithoutBookmarksInput;
}

export interface UseraccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UseraccountWhereInput>;
  AND?: Maybe<
    UseraccountSubscriptionWhereInput[] | UseraccountSubscriptionWhereInput
  >;
}

export interface BookmarkCreateInput {
  id?: Maybe<ID_Input>;
  belongsTo: UseraccountCreateOneWithoutBookmarksInput;
  tags?: Maybe<BookmarkCreatetagsInput>;
  url: String;
  displayurl: String;
  description?: Maybe<String>;
  fromsource: String;
  tweetsourcetext?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
}

export interface UseraccountUpdateManyMutationInput {
  registered_source?: Maybe<String>;
  twitter_id?: Maybe<String>;
  twitter_display_name?: Maybe<String>;
  twitter_screen_name?: Maybe<String>;
  twitter_profile_image?: Maybe<String>;
}

export interface UseraccountCreateOneWithoutBookmarksInput {
  create?: Maybe<UseraccountCreateWithoutBookmarksInput>;
  connect?: Maybe<UseraccountWhereUniqueInput>;
}

export interface BookmarkUpdateManyWithWhereNestedInput {
  where: BookmarkScalarWhereInput;
  data: BookmarkUpdateManyDataInput;
}

export interface UseraccountCreateWithoutBookmarksInput {
  id?: Maybe<ID_Input>;
  registered_source: String;
  twitter_id?: Maybe<String>;
  twitter_display_name?: Maybe<String>;
  twitter_screen_name?: Maybe<String>;
  twitter_profile_image?: Maybe<String>;
}

export interface BookmarkUpsertWithWhereUniqueWithoutBelongsToInput {
  where: BookmarkWhereUniqueInput;
  update: BookmarkUpdateWithoutBelongsToDataInput;
  create: BookmarkCreateWithoutBelongsToInput;
}

export interface BookmarkCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface BookmarkUpdateWithoutBelongsToDataInput {
  tags?: Maybe<BookmarkUpdatetagsInput>;
  url?: Maybe<String>;
  displayurl?: Maybe<String>;
  description?: Maybe<String>;
  fromsource?: Maybe<String>;
  tweetsourcetext?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
}

export interface BookmarkUpdateInput {
  belongsTo?: Maybe<UseraccountUpdateOneRequiredWithoutBookmarksInput>;
  tags?: Maybe<BookmarkUpdatetagsInput>;
  url?: Maybe<String>;
  displayurl?: Maybe<String>;
  description?: Maybe<String>;
  fromsource?: Maybe<String>;
  tweetsourcetext?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
}

export interface BookmarkUpdateManyWithoutBelongsToInput {
  create?: Maybe<
    BookmarkCreateWithoutBelongsToInput[] | BookmarkCreateWithoutBelongsToInput
  >;
  delete?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>;
  connect?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>;
  set?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>;
  disconnect?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>;
  update?: Maybe<
    | BookmarkUpdateWithWhereUniqueWithoutBelongsToInput[]
    | BookmarkUpdateWithWhereUniqueWithoutBelongsToInput
  >;
  upsert?: Maybe<
    | BookmarkUpsertWithWhereUniqueWithoutBelongsToInput[]
    | BookmarkUpsertWithWhereUniqueWithoutBelongsToInput
  >;
  deleteMany?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>;
  updateMany?: Maybe<
    | BookmarkUpdateManyWithWhereNestedInput[]
    | BookmarkUpdateManyWithWhereNestedInput
  >;
}

export interface BookmarkCreateWithoutBelongsToInput {
  id?: Maybe<ID_Input>;
  tags?: Maybe<BookmarkCreatetagsInput>;
  url: String;
  displayurl: String;
  description?: Maybe<String>;
  fromsource: String;
  tweetsourcetext?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
}

export interface BookmarkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookmarkWhereInput>;
  AND?: Maybe<
    BookmarkSubscriptionWhereInput[] | BookmarkSubscriptionWhereInput
  >;
}

export interface UseraccountUpdateWithoutBookmarksDataInput {
  registered_source?: Maybe<String>;
  twitter_id?: Maybe<String>;
  twitter_display_name?: Maybe<String>;
  twitter_screen_name?: Maybe<String>;
  twitter_profile_image?: Maybe<String>;
}

export interface BookmarkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  displayurl?: Maybe<String>;
  displayurl_not?: Maybe<String>;
  displayurl_in?: Maybe<String[] | String>;
  displayurl_not_in?: Maybe<String[] | String>;
  displayurl_lt?: Maybe<String>;
  displayurl_lte?: Maybe<String>;
  displayurl_gt?: Maybe<String>;
  displayurl_gte?: Maybe<String>;
  displayurl_contains?: Maybe<String>;
  displayurl_not_contains?: Maybe<String>;
  displayurl_starts_with?: Maybe<String>;
  displayurl_not_starts_with?: Maybe<String>;
  displayurl_ends_with?: Maybe<String>;
  displayurl_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  fromsource?: Maybe<String>;
  fromsource_not?: Maybe<String>;
  fromsource_in?: Maybe<String[] | String>;
  fromsource_not_in?: Maybe<String[] | String>;
  fromsource_lt?: Maybe<String>;
  fromsource_lte?: Maybe<String>;
  fromsource_gt?: Maybe<String>;
  fromsource_gte?: Maybe<String>;
  fromsource_contains?: Maybe<String>;
  fromsource_not_contains?: Maybe<String>;
  fromsource_starts_with?: Maybe<String>;
  fromsource_not_starts_with?: Maybe<String>;
  fromsource_ends_with?: Maybe<String>;
  fromsource_not_ends_with?: Maybe<String>;
  tweetsourcetext?: Maybe<String>;
  tweetsourcetext_not?: Maybe<String>;
  tweetsourcetext_in?: Maybe<String[] | String>;
  tweetsourcetext_not_in?: Maybe<String[] | String>;
  tweetsourcetext_lt?: Maybe<String>;
  tweetsourcetext_lte?: Maybe<String>;
  tweetsourcetext_gt?: Maybe<String>;
  tweetsourcetext_gte?: Maybe<String>;
  tweetsourcetext_contains?: Maybe<String>;
  tweetsourcetext_not_contains?: Maybe<String>;
  tweetsourcetext_starts_with?: Maybe<String>;
  tweetsourcetext_not_starts_with?: Maybe<String>;
  tweetsourcetext_ends_with?: Maybe<String>;
  tweetsourcetext_not_ends_with?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceuserid_not?: Maybe<String>;
  tweetsourceuserid_in?: Maybe<String[] | String>;
  tweetsourceuserid_not_in?: Maybe<String[] | String>;
  tweetsourceuserid_lt?: Maybe<String>;
  tweetsourceuserid_lte?: Maybe<String>;
  tweetsourceuserid_gt?: Maybe<String>;
  tweetsourceuserid_gte?: Maybe<String>;
  tweetsourceuserid_contains?: Maybe<String>;
  tweetsourceuserid_not_contains?: Maybe<String>;
  tweetsourceuserid_starts_with?: Maybe<String>;
  tweetsourceuserid_not_starts_with?: Maybe<String>;
  tweetsourceuserid_ends_with?: Maybe<String>;
  tweetsourceuserid_not_ends_with?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourceusername_not?: Maybe<String>;
  tweetsourceusername_in?: Maybe<String[] | String>;
  tweetsourceusername_not_in?: Maybe<String[] | String>;
  tweetsourceusername_lt?: Maybe<String>;
  tweetsourceusername_lte?: Maybe<String>;
  tweetsourceusername_gt?: Maybe<String>;
  tweetsourceusername_gte?: Maybe<String>;
  tweetsourceusername_contains?: Maybe<String>;
  tweetsourceusername_not_contains?: Maybe<String>;
  tweetsourceusername_starts_with?: Maybe<String>;
  tweetsourceusername_not_starts_with?: Maybe<String>;
  tweetsourceusername_ends_with?: Maybe<String>;
  tweetsourceusername_not_ends_with?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
  tweetsourcescreenname_not?: Maybe<String>;
  tweetsourcescreenname_in?: Maybe<String[] | String>;
  tweetsourcescreenname_not_in?: Maybe<String[] | String>;
  tweetsourcescreenname_lt?: Maybe<String>;
  tweetsourcescreenname_lte?: Maybe<String>;
  tweetsourcescreenname_gt?: Maybe<String>;
  tweetsourcescreenname_gte?: Maybe<String>;
  tweetsourcescreenname_contains?: Maybe<String>;
  tweetsourcescreenname_not_contains?: Maybe<String>;
  tweetsourcescreenname_starts_with?: Maybe<String>;
  tweetsourcescreenname_not_starts_with?: Maybe<String>;
  tweetsourcescreenname_ends_with?: Maybe<String>;
  tweetsourcescreenname_not_ends_with?: Maybe<String>;
  AND?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>;
  OR?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>;
  NOT?: Maybe<BookmarkScalarWhereInput[] | BookmarkScalarWhereInput>;
}

export interface BookmarkCreateManyWithoutBelongsToInput {
  create?: Maybe<
    BookmarkCreateWithoutBelongsToInput[] | BookmarkCreateWithoutBelongsToInput
  >;
  connect?: Maybe<BookmarkWhereUniqueInput[] | BookmarkWhereUniqueInput>;
}

export interface BookmarkUpdateManyMutationInput {
  tags?: Maybe<BookmarkUpdatetagsInput>;
  url?: Maybe<String>;
  displayurl?: Maybe<String>;
  description?: Maybe<String>;
  fromsource?: Maybe<String>;
  tweetsourcetext?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
}

export interface BookmarkUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface BookmarkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  belongsTo?: Maybe<UseraccountWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  displayurl?: Maybe<String>;
  displayurl_not?: Maybe<String>;
  displayurl_in?: Maybe<String[] | String>;
  displayurl_not_in?: Maybe<String[] | String>;
  displayurl_lt?: Maybe<String>;
  displayurl_lte?: Maybe<String>;
  displayurl_gt?: Maybe<String>;
  displayurl_gte?: Maybe<String>;
  displayurl_contains?: Maybe<String>;
  displayurl_not_contains?: Maybe<String>;
  displayurl_starts_with?: Maybe<String>;
  displayurl_not_starts_with?: Maybe<String>;
  displayurl_ends_with?: Maybe<String>;
  displayurl_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  fromsource?: Maybe<String>;
  fromsource_not?: Maybe<String>;
  fromsource_in?: Maybe<String[] | String>;
  fromsource_not_in?: Maybe<String[] | String>;
  fromsource_lt?: Maybe<String>;
  fromsource_lte?: Maybe<String>;
  fromsource_gt?: Maybe<String>;
  fromsource_gte?: Maybe<String>;
  fromsource_contains?: Maybe<String>;
  fromsource_not_contains?: Maybe<String>;
  fromsource_starts_with?: Maybe<String>;
  fromsource_not_starts_with?: Maybe<String>;
  fromsource_ends_with?: Maybe<String>;
  fromsource_not_ends_with?: Maybe<String>;
  tweetsourcetext?: Maybe<String>;
  tweetsourcetext_not?: Maybe<String>;
  tweetsourcetext_in?: Maybe<String[] | String>;
  tweetsourcetext_not_in?: Maybe<String[] | String>;
  tweetsourcetext_lt?: Maybe<String>;
  tweetsourcetext_lte?: Maybe<String>;
  tweetsourcetext_gt?: Maybe<String>;
  tweetsourcetext_gte?: Maybe<String>;
  tweetsourcetext_contains?: Maybe<String>;
  tweetsourcetext_not_contains?: Maybe<String>;
  tweetsourcetext_starts_with?: Maybe<String>;
  tweetsourcetext_not_starts_with?: Maybe<String>;
  tweetsourcetext_ends_with?: Maybe<String>;
  tweetsourcetext_not_ends_with?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceuserid_not?: Maybe<String>;
  tweetsourceuserid_in?: Maybe<String[] | String>;
  tweetsourceuserid_not_in?: Maybe<String[] | String>;
  tweetsourceuserid_lt?: Maybe<String>;
  tweetsourceuserid_lte?: Maybe<String>;
  tweetsourceuserid_gt?: Maybe<String>;
  tweetsourceuserid_gte?: Maybe<String>;
  tweetsourceuserid_contains?: Maybe<String>;
  tweetsourceuserid_not_contains?: Maybe<String>;
  tweetsourceuserid_starts_with?: Maybe<String>;
  tweetsourceuserid_not_starts_with?: Maybe<String>;
  tweetsourceuserid_ends_with?: Maybe<String>;
  tweetsourceuserid_not_ends_with?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourceusername_not?: Maybe<String>;
  tweetsourceusername_in?: Maybe<String[] | String>;
  tweetsourceusername_not_in?: Maybe<String[] | String>;
  tweetsourceusername_lt?: Maybe<String>;
  tweetsourceusername_lte?: Maybe<String>;
  tweetsourceusername_gt?: Maybe<String>;
  tweetsourceusername_gte?: Maybe<String>;
  tweetsourceusername_contains?: Maybe<String>;
  tweetsourceusername_not_contains?: Maybe<String>;
  tweetsourceusername_starts_with?: Maybe<String>;
  tweetsourceusername_not_starts_with?: Maybe<String>;
  tweetsourceusername_ends_with?: Maybe<String>;
  tweetsourceusername_not_ends_with?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
  tweetsourcescreenname_not?: Maybe<String>;
  tweetsourcescreenname_in?: Maybe<String[] | String>;
  tweetsourcescreenname_not_in?: Maybe<String[] | String>;
  tweetsourcescreenname_lt?: Maybe<String>;
  tweetsourcescreenname_lte?: Maybe<String>;
  tweetsourcescreenname_gt?: Maybe<String>;
  tweetsourcescreenname_gte?: Maybe<String>;
  tweetsourcescreenname_contains?: Maybe<String>;
  tweetsourcescreenname_not_contains?: Maybe<String>;
  tweetsourcescreenname_starts_with?: Maybe<String>;
  tweetsourcescreenname_not_starts_with?: Maybe<String>;
  tweetsourcescreenname_ends_with?: Maybe<String>;
  tweetsourcescreenname_not_ends_with?: Maybe<String>;
  AND?: Maybe<BookmarkWhereInput[] | BookmarkWhereInput>;
}

export type UseraccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  twitter_id?: Maybe<String>;
}>;

export interface BookmarkUpdateManyDataInput {
  tags?: Maybe<BookmarkUpdatetagsInput>;
  url?: Maybe<String>;
  displayurl?: Maybe<String>;
  description?: Maybe<String>;
  fromsource?: Maybe<String>;
  tweetsourcetext?: Maybe<String>;
  tweetsourceuserid?: Maybe<String>;
  tweetsourceusername?: Maybe<String>;
  tweetsourcescreenname?: Maybe<String>;
}

export interface UseraccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  registered_source?: Maybe<String>;
  registered_source_not?: Maybe<String>;
  registered_source_in?: Maybe<String[] | String>;
  registered_source_not_in?: Maybe<String[] | String>;
  registered_source_lt?: Maybe<String>;
  registered_source_lte?: Maybe<String>;
  registered_source_gt?: Maybe<String>;
  registered_source_gte?: Maybe<String>;
  registered_source_contains?: Maybe<String>;
  registered_source_not_contains?: Maybe<String>;
  registered_source_starts_with?: Maybe<String>;
  registered_source_not_starts_with?: Maybe<String>;
  registered_source_ends_with?: Maybe<String>;
  registered_source_not_ends_with?: Maybe<String>;
  twitter_id?: Maybe<String>;
  twitter_id_not?: Maybe<String>;
  twitter_id_in?: Maybe<String[] | String>;
  twitter_id_not_in?: Maybe<String[] | String>;
  twitter_id_lt?: Maybe<String>;
  twitter_id_lte?: Maybe<String>;
  twitter_id_gt?: Maybe<String>;
  twitter_id_gte?: Maybe<String>;
  twitter_id_contains?: Maybe<String>;
  twitter_id_not_contains?: Maybe<String>;
  twitter_id_starts_with?: Maybe<String>;
  twitter_id_not_starts_with?: Maybe<String>;
  twitter_id_ends_with?: Maybe<String>;
  twitter_id_not_ends_with?: Maybe<String>;
  twitter_display_name?: Maybe<String>;
  twitter_display_name_not?: Maybe<String>;
  twitter_display_name_in?: Maybe<String[] | String>;
  twitter_display_name_not_in?: Maybe<String[] | String>;
  twitter_display_name_lt?: Maybe<String>;
  twitter_display_name_lte?: Maybe<String>;
  twitter_display_name_gt?: Maybe<String>;
  twitter_display_name_gte?: Maybe<String>;
  twitter_display_name_contains?: Maybe<String>;
  twitter_display_name_not_contains?: Maybe<String>;
  twitter_display_name_starts_with?: Maybe<String>;
  twitter_display_name_not_starts_with?: Maybe<String>;
  twitter_display_name_ends_with?: Maybe<String>;
  twitter_display_name_not_ends_with?: Maybe<String>;
  twitter_screen_name?: Maybe<String>;
  twitter_screen_name_not?: Maybe<String>;
  twitter_screen_name_in?: Maybe<String[] | String>;
  twitter_screen_name_not_in?: Maybe<String[] | String>;
  twitter_screen_name_lt?: Maybe<String>;
  twitter_screen_name_lte?: Maybe<String>;
  twitter_screen_name_gt?: Maybe<String>;
  twitter_screen_name_gte?: Maybe<String>;
  twitter_screen_name_contains?: Maybe<String>;
  twitter_screen_name_not_contains?: Maybe<String>;
  twitter_screen_name_starts_with?: Maybe<String>;
  twitter_screen_name_not_starts_with?: Maybe<String>;
  twitter_screen_name_ends_with?: Maybe<String>;
  twitter_screen_name_not_ends_with?: Maybe<String>;
  twitter_profile_image?: Maybe<String>;
  twitter_profile_image_not?: Maybe<String>;
  twitter_profile_image_in?: Maybe<String[] | String>;
  twitter_profile_image_not_in?: Maybe<String[] | String>;
  twitter_profile_image_lt?: Maybe<String>;
  twitter_profile_image_lte?: Maybe<String>;
  twitter_profile_image_gt?: Maybe<String>;
  twitter_profile_image_gte?: Maybe<String>;
  twitter_profile_image_contains?: Maybe<String>;
  twitter_profile_image_not_contains?: Maybe<String>;
  twitter_profile_image_starts_with?: Maybe<String>;
  twitter_profile_image_not_starts_with?: Maybe<String>;
  twitter_profile_image_ends_with?: Maybe<String>;
  twitter_profile_image_not_ends_with?: Maybe<String>;
  bookmarks_some?: Maybe<BookmarkWhereInput>;
  AND?: Maybe<UseraccountWhereInput[] | UseraccountWhereInput>;
}

export interface BookmarkUpdateWithWhereUniqueWithoutBelongsToInput {
  where: BookmarkWhereUniqueInput;
  data: BookmarkUpdateWithoutBelongsToDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UseraccountPreviousValues {
  id: ID_Output;
  registered_source: String;
  twitter_id?: String;
  twitter_display_name?: String;
  twitter_screen_name?: String;
  twitter_profile_image?: String;
}

export interface UseraccountPreviousValuesPromise
  extends Promise<UseraccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  registered_source: () => Promise<String>;
  twitter_id: () => Promise<String>;
  twitter_display_name: () => Promise<String>;
  twitter_screen_name: () => Promise<String>;
  twitter_profile_image: () => Promise<String>;
}

export interface UseraccountPreviousValuesSubscription
  extends Promise<AsyncIterator<UseraccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  registered_source: () => Promise<AsyncIterator<String>>;
  twitter_id: () => Promise<AsyncIterator<String>>;
  twitter_display_name: () => Promise<AsyncIterator<String>>;
  twitter_screen_name: () => Promise<AsyncIterator<String>>;
  twitter_profile_image: () => Promise<AsyncIterator<String>>;
}

export interface BookmarkEdge {
  node: Bookmark;
  cursor: String;
}

export interface BookmarkEdgePromise
  extends Promise<BookmarkEdge>,
    Fragmentable {
  node: <T = BookmarkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookmarkEdgeSubscription
  extends Promise<AsyncIterator<BookmarkEdge>>,
    Fragmentable {
  node: <T = BookmarkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BookmarkSubscriptionPayload {
  mutation: MutationType;
  node: Bookmark;
  updatedFields: String[];
  previousValues: BookmarkPreviousValues;
}

export interface BookmarkSubscriptionPayloadPromise
  extends Promise<BookmarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookmarkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookmarkPreviousValuesPromise>() => T;
}

export interface BookmarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookmarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookmarkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookmarkPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUseraccount {
  count: Int;
}

export interface AggregateUseraccountPromise
  extends Promise<AggregateUseraccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUseraccountSubscription
  extends Promise<AsyncIterator<AggregateUseraccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Bookmark {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  tags: String[];
  url: String;
  displayurl: String;
  description?: String;
  fromsource: String;
  tweetsourcetext?: String;
  tweetsourceuserid?: String;
  tweetsourceusername?: String;
  tweetsourcescreenname?: String;
}

export interface BookmarkPromise extends Promise<Bookmark>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  belongsTo: <T = UseraccountPromise>() => T;
  tags: () => Promise<String[]>;
  url: () => Promise<String>;
  displayurl: () => Promise<String>;
  description: () => Promise<String>;
  fromsource: () => Promise<String>;
  tweetsourcetext: () => Promise<String>;
  tweetsourceuserid: () => Promise<String>;
  tweetsourceusername: () => Promise<String>;
  tweetsourcescreenname: () => Promise<String>;
}

export interface BookmarkSubscription
  extends Promise<AsyncIterator<Bookmark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  belongsTo: <T = UseraccountSubscription>() => T;
  tags: () => Promise<AsyncIterator<String[]>>;
  url: () => Promise<AsyncIterator<String>>;
  displayurl: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  fromsource: () => Promise<AsyncIterator<String>>;
  tweetsourcetext: () => Promise<AsyncIterator<String>>;
  tweetsourceuserid: () => Promise<AsyncIterator<String>>;
  tweetsourceusername: () => Promise<AsyncIterator<String>>;
  tweetsourcescreenname: () => Promise<AsyncIterator<String>>;
}

export interface BookmarkNullablePromise
  extends Promise<Bookmark | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  belongsTo: <T = UseraccountPromise>() => T;
  tags: () => Promise<String[]>;
  url: () => Promise<String>;
  displayurl: () => Promise<String>;
  description: () => Promise<String>;
  fromsource: () => Promise<String>;
  tweetsourcetext: () => Promise<String>;
  tweetsourceuserid: () => Promise<String>;
  tweetsourceusername: () => Promise<String>;
  tweetsourcescreenname: () => Promise<String>;
}

export interface BookmarkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  tags: String[];
  url: String;
  displayurl: String;
  description?: String;
  fromsource: String;
  tweetsourcetext?: String;
  tweetsourceuserid?: String;
  tweetsourceusername?: String;
  tweetsourcescreenname?: String;
}

export interface BookmarkPreviousValuesPromise
  extends Promise<BookmarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  tags: () => Promise<String[]>;
  url: () => Promise<String>;
  displayurl: () => Promise<String>;
  description: () => Promise<String>;
  fromsource: () => Promise<String>;
  tweetsourcetext: () => Promise<String>;
  tweetsourceuserid: () => Promise<String>;
  tweetsourceusername: () => Promise<String>;
  tweetsourcescreenname: () => Promise<String>;
}

export interface BookmarkPreviousValuesSubscription
  extends Promise<AsyncIterator<BookmarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  url: () => Promise<AsyncIterator<String>>;
  displayurl: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  fromsource: () => Promise<AsyncIterator<String>>;
  tweetsourcetext: () => Promise<AsyncIterator<String>>;
  tweetsourceuserid: () => Promise<AsyncIterator<String>>;
  tweetsourceusername: () => Promise<AsyncIterator<String>>;
  tweetsourcescreenname: () => Promise<AsyncIterator<String>>;
}

export interface BookmarkConnection {
  pageInfo: PageInfo;
  edges: BookmarkEdge[];
}

export interface BookmarkConnectionPromise
  extends Promise<BookmarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookmarkEdge>>() => T;
  aggregate: <T = AggregateBookmarkPromise>() => T;
}

export interface BookmarkConnectionSubscription
  extends Promise<AsyncIterator<BookmarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookmarkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookmarkSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UseraccountEdge {
  node: Useraccount;
  cursor: String;
}

export interface UseraccountEdgePromise
  extends Promise<UseraccountEdge>,
    Fragmentable {
  node: <T = UseraccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UseraccountEdgeSubscription
  extends Promise<AsyncIterator<UseraccountEdge>>,
    Fragmentable {
  node: <T = UseraccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UseraccountSubscriptionPayload {
  mutation: MutationType;
  node: Useraccount;
  updatedFields: String[];
  previousValues: UseraccountPreviousValues;
}

export interface UseraccountSubscriptionPayloadPromise
  extends Promise<UseraccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UseraccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UseraccountPreviousValuesPromise>() => T;
}

export interface UseraccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UseraccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UseraccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UseraccountPreviousValuesSubscription>() => T;
}

export interface AggregateBookmark {
  count: Int;
}

export interface AggregateBookmarkPromise
  extends Promise<AggregateBookmark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookmarkSubscription
  extends Promise<AsyncIterator<AggregateBookmark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Useraccount {
  id: ID_Output;
  registered_source: String;
  twitter_id?: String;
  twitter_display_name?: String;
  twitter_screen_name?: String;
  twitter_profile_image?: String;
}

export interface UseraccountPromise extends Promise<Useraccount>, Fragmentable {
  id: () => Promise<ID_Output>;
  registered_source: () => Promise<String>;
  twitter_id: () => Promise<String>;
  twitter_display_name: () => Promise<String>;
  twitter_screen_name: () => Promise<String>;
  twitter_profile_image: () => Promise<String>;
  bookmarks: <T = FragmentableArray<Bookmark>>(args?: {
    where?: BookmarkWhereInput;
    orderBy?: BookmarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UseraccountSubscription
  extends Promise<AsyncIterator<Useraccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  registered_source: () => Promise<AsyncIterator<String>>;
  twitter_id: () => Promise<AsyncIterator<String>>;
  twitter_display_name: () => Promise<AsyncIterator<String>>;
  twitter_screen_name: () => Promise<AsyncIterator<String>>;
  twitter_profile_image: () => Promise<AsyncIterator<String>>;
  bookmarks: <T = Promise<AsyncIterator<BookmarkSubscription>>>(args?: {
    where?: BookmarkWhereInput;
    orderBy?: BookmarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UseraccountNullablePromise
  extends Promise<Useraccount | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  registered_source: () => Promise<String>;
  twitter_id: () => Promise<String>;
  twitter_display_name: () => Promise<String>;
  twitter_screen_name: () => Promise<String>;
  twitter_profile_image: () => Promise<String>;
  bookmarks: <T = FragmentableArray<Bookmark>>(args?: {
    where?: BookmarkWhereInput;
    orderBy?: BookmarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UseraccountConnection {
  pageInfo: PageInfo;
  edges: UseraccountEdge[];
}

export interface UseraccountConnectionPromise
  extends Promise<UseraccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UseraccountEdge>>() => T;
  aggregate: <T = AggregateUseraccountPromise>() => T;
}

export interface UseraccountConnectionSubscription
  extends Promise<AsyncIterator<UseraccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UseraccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUseraccountSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Useraccount",
    embedded: false
  },
  {
    name: "Bookmark",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
